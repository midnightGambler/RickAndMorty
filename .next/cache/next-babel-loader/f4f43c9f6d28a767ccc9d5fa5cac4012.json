{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\location\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport gql from \"graphql-tag\";\nimport Page from \"../../components/Page/Page\";\nimport Layout from \"../../components/Layout/Layout\";\nimport Loader from \"../../components/Loader/Loader\";\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\n\nconst QUERY = query => gql`\n {\n  currentResidentsPage @client\n  location(id: ${query}) {\n    name\n    type\n    residents {\n      image\n      name\n      type\n      id\n    }\n  }\n}\n`;\n\nconst LocationPage = () => {\n  const {\n    query\n  } = useRouter();\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(QUERY(query.id));\n  const client = useApolloClient();\n\n  const renderPage = () => {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      const {\n        location: {\n          name,\n          type,\n          residents\n        },\n        currentResidentsPage\n      } = data;\n      const start = 20 * currentResidentsPage;\n      const end = 20 * (currentResidentsPage + 1);\n      const pageData = [...residents].splice(20 * currentResidentsPage, 20 * (currentResidentsPage + 1));\n      const hasMore = residents.length - currentResidentsPage * 20;\n      console.log(start, end, currentResidentsPage, pageData, hasMore);\n      console.log(data);\n      return __jsx(React.Fragment, null, __jsx(LocationInfo, {\n        type: type,\n        name: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), __jsx(InfiniteScroll, {\n        initialLoad: false,\n        loader: __jsx(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }),\n        pageStart: 0,\n        loadMore: () => {\n          client.writeData({\n            data: {\n              currentResidentsPage: currentResidentsPage + 1\n            }\n          });\n        },\n        hasMore: residents.length - currentResidentsPage * 20 > 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, __jsx(Layout, {\n        title: \"Residents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, pageData.map(resident => __jsx(ResidentsItem, _extends({\n        key: resident.id,\n        location: name\n      }, resident, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }))))));\n    }\n  };\n\n  return __jsx(Page, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default LocationPage;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/location/[id].js"],"names":["useState","useEffect","useRouter","useQuery","useApolloClient","InfiniteScroll","gql","Page","Layout","Loader","LocationInfo","ResidentsItem","QUERY","query","LocationPage","loading","data","error","id","client","renderPage","location","name","type","residents","currentResidentsPage","start","end","pageData","splice","hasMore","length","console","log","writeData","map","resident"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,qBAA1C;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAIP,GAAI;;;iBAGVO,KAAM;;;;;;;;;;;CAHvB;;AAgBA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM;AAAED,IAAAA;AAAF,MAAYX,SAAS,EAA3B;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2Bd,QAAQ,CAACS,KAAK,CAACC,KAAK,CAACK,EAAP,CAAN,CAAzC;AACA,QAAMC,MAAM,GAAGf,eAAe,EAA9B;;AAEA,QAAMgB,UAAU,GAAG,MAAM;AACvB,QAAIL,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AACR,YAAM;AACJK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,IAAR;AAAcC,UAAAA;AAAd,SADN;AAEJC,QAAAA;AAFI,UAGFT,IAHJ;AAIA,YAAMU,KAAK,GAAG,KAAKD,oBAAnB;AACA,YAAME,GAAG,GAAG,MAAMF,oBAAoB,GAAG,CAA7B,CAAZ;AACA,YAAMG,QAAQ,GAAG,CAAC,GAAGJ,SAAJ,EAAeK,MAAf,CACf,KAAKJ,oBADU,EAEf,MAAMA,oBAAoB,GAAG,CAA7B,CAFe,CAAjB;AAIA,YAAMK,OAAO,GAAGN,SAAS,CAACO,MAAV,GAAmBN,oBAAoB,GAAG,EAA1D;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmBC,GAAnB,EAAwBF,oBAAxB,EAA8CG,QAA9C,EAAwDE,OAAxD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACA,aACE,4BACE,MAAC,YAAD;AAAc,QAAA,IAAI,EAAEO,IAApB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,cAAD;AACE,QAAA,WAAW,EAAE,KADf;AAEE,QAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFV;AAGE,QAAA,SAAS,EAAE,CAHb;AAIE,QAAA,QAAQ,EAAE,MAAM;AACdH,UAAAA,MAAM,CAACe,SAAP,CAAiB;AACflB,YAAAA,IAAI,EAAE;AAAES,cAAAA,oBAAoB,EAAEA,oBAAoB,GAAG;AAA/C;AADS,WAAjB;AAGD,SARH;AASE,QAAA,OAAO,EAAED,SAAS,CAACO,MAAV,GAAmBN,oBAAoB,GAAG,EAA1C,GAA+C,CAT1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGG,QAAQ,CAACO,GAAT,CAAaC,QAAQ,IACpB,MAAC,aAAD;AACE,QAAA,GAAG,EAAEA,QAAQ,CAAClB,EADhB;AAEE,QAAA,QAAQ,EAAEI;AAFZ,SAGMc,QAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD,CADH,CAXF,CAFF,CADF;AA0BD;AACF,GA7CD;;AA+CA,SAAO,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBhB,UAAU,EAA1B,CAAP;AACD,CArDD;;AAuDA,eAAeN,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport gql from \"graphql-tag\";\r\nimport Page from \"../../components/Page/Page\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\r\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\r\n\r\nconst QUERY = query => gql`\r\n {\r\n  currentResidentsPage @client\r\n  location(id: ${query}) {\r\n    name\r\n    type\r\n    residents {\r\n      image\r\n      name\r\n      type\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst LocationPage = () => {\r\n  const { query } = useRouter();\r\n  const { loading, data, error } = useQuery(QUERY(query.id));\r\n  const client = useApolloClient();\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      const {\r\n        location: { name, type, residents },\r\n        currentResidentsPage\r\n      } = data;\r\n      const start = 20 * currentResidentsPage;\r\n      const end = 20 * (currentResidentsPage + 1);\r\n      const pageData = [...residents].splice(\r\n        20 * currentResidentsPage,\r\n        20 * (currentResidentsPage + 1)\r\n      );\r\n      const hasMore = residents.length - currentResidentsPage * 20;\r\n\r\n      console.log(start, end, currentResidentsPage, pageData, hasMore);\r\n      console.log(data);\r\n      return (\r\n        <>\r\n          <LocationInfo type={type} name={name} />\r\n          <InfiniteScroll\r\n            initialLoad={false}\r\n            loader={<Loader />}\r\n            pageStart={0}\r\n            loadMore={() => {\r\n              client.writeData({\r\n                data: { currentResidentsPage: currentResidentsPage + 1 }\r\n              });\r\n            }}\r\n            hasMore={residents.length - currentResidentsPage * 20 > 0}\r\n          >\r\n            <Layout title=\"Residents\">\r\n              {pageData.map(resident => (\r\n                <ResidentsItem\r\n                  key={resident.id}\r\n                  location={name}\r\n                  {...resident}\r\n                />\r\n              ))}\r\n            </Layout>\r\n          </InfiniteScroll>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <Page href=\"/\">{renderPage()}</Page>;\r\n};\r\n\r\nexport default LocationPage;\r\n"]},"metadata":{},"sourceType":"module"}