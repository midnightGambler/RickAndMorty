{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\hooks\\\\withApollo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport withApollo from \"next-with-apollo\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nexport default withApollo(({\n  initialState\n}) => {\n  return new ApolloClient({\n    uri: \"https://rickandmortyapi.com/graphql\",\n    cache: new InMemoryCache().restore(initialState || {}),\n    clientState: {\n      defaults: {\n        locations: []\n      },\n      resolvers: {\n        Mutation: {\n          updateLocations: (_, {\n            locations\n          }, {\n            cache\n          }) => {\n            cache.writeData({\n              data: {\n                locations\n              }\n            });\n            return null;\n          }\n        }\n      }\n    }\n  });\n}, {\n  render: ({\n    Page,\n    props\n  }) => {\n    return __jsx(ApolloProvider, {\n      client: props.apollo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(Page, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })));\n  }\n});","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/hooks/withApollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","ApolloProvider","initialState","uri","cache","restore","clientState","defaults","locations","resolvers","Mutation","updateLocations","_","writeData","data","render","Page","props","apollo"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,eAAeH,UAAU,CACvB,CAAC;AAAEI,EAAAA;AAAF,CAAD,KAAsB;AACpB,SAAO,IAAIH,YAAJ,CAAiB;AACtBI,IAAAA,GAAG,EAAE,qCADiB;AAEtBC,IAAAA,KAAK,EAAE,IAAIJ,aAAJ,GAAoBK,OAApB,CAA4BH,YAAY,IAAI,EAA5C,CAFe;AAGtBI,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE;AADH,OADC;AAIXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,eAAe,EAAE,CAACC,CAAD,EAAI;AAAEJ,YAAAA;AAAF,WAAJ,EAAmB;AAAEJ,YAAAA;AAAF,WAAnB,KAAiC;AAChDA,YAAAA,KAAK,CAACS,SAAN,CAAgB;AAAEC,cAAAA,IAAI,EAAE;AAAEN,gBAAAA;AAAF;AAAR,aAAhB;AACA,mBAAO,IAAP;AACD;AAJO;AADD;AAJA;AAHS,GAAjB,CAAP;AAiBD,CAnBsB,EAoBvB;AACEO,EAAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAqB;AAC3B,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,KAAK,CAACC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,eAAUD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;AAPH,CApBuB,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\r\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\n\r\nexport default withApollo(\r\n  ({ initialState }) => {\r\n    return new ApolloClient({\r\n      uri: \"https://rickandmortyapi.com/graphql\",\r\n      cache: new InMemoryCache().restore(initialState || {}),\r\n      clientState: {\r\n        defaults: {\r\n          locations: []\r\n        },\r\n        resolvers: {\r\n          Mutation: {\r\n            updateLocations: (_, { locations }, { cache }) => {\r\n              cache.writeData({ data: { locations } });\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  {\r\n    render: ({ Page, props }) => {\r\n      return (\r\n        <ApolloProvider client={props.apollo}>\r\n          <Page {...props} />\r\n        </ApolloProvider>\r\n      );\r\n    }\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}