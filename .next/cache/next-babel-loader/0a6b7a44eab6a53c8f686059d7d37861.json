{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\location\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n {\\n   currentPage @client\\n  location(id: \", \") {\\n    name\\n    type\\n    residents {\\n      image\\n      name\\n      type\\n      id\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Page from \"../../components/Page/Page\";\nimport Layout from \"../../components/Layout/Layout\";\nimport Loader from \"../../components/Loader/Loader\";\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\n\nvar QUERY = function QUERY(query) {\n  return gql(_templateObject(), query);\n};\n\nvar LocationPage = function LocationPage() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useQuery = useQuery(QUERY(query.id)),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var renderPage = function renderPage() {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      var _data$location = data.location,\n          name = _data$location.name,\n          type = _data$location.type,\n          residents = _data$location.residents,\n          currentPage = data.currentPage;\n      var start = 20 * currentPage;\n      var end = 20 * (currentPage + 1);\n      var pageData = residents.splice(20 * currentPage, 20 * (currentPage + 1));\n      console.log(start, end, currentPage, pageData); // console.log(data)\n\n      return __jsx(React.Fragment, null, __jsx(LocationInfo, {\n        type: type,\n        name: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), __jsx(Layout, {\n        title: \"Residents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, pageData.map(function (resident) {\n        return __jsx(ResidentsItem, _extends({\n          key: resident.id,\n          location: name\n        }, resident, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      })));\n    }\n  };\n\n  return __jsx(Page, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default LocationPage;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/location/[id].js"],"names":["useState","useEffect","useRouter","useQuery","gql","Page","Layout","Loader","LocationInfo","ResidentsItem","QUERY","query","LocationPage","id","loading","data","error","renderPage","location","name","type","residents","currentPage","start","end","pageData","splice","console","log","map","resident"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SAAIP,GAAJ,oBAGFO,KAHE;AAAA,CAAnB;;AAgBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,mBACPV,SAAS,EADF;AAAA,MACjBS,KADiB,cACjBA,KADiB;;AAAA,kBAEQR,QAAQ,CAACO,KAAK,CAACC,KAAK,CAACE,EAAP,CAAN,CAFhB;AAAA,MAEjBC,OAFiB,aAEjBA,OAFiB;AAAA,MAERC,IAFQ,aAERA,IAFQ;AAAA,MAEFC,KAFE,aAEFA,KAFE;;AAIzB,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIH,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AAAA,2BAIJA,IAJI,CAENG,QAFM;AAAA,UAEMC,IAFN,kBAEMA,IAFN;AAAA,UAEYC,IAFZ,kBAEYA,IAFZ;AAAA,UAEkBC,SAFlB,kBAEkBA,SAFlB;AAAA,UAGNC,WAHM,GAIJP,IAJI,CAGNO,WAHM;AAKR,UAAMC,KAAK,GAAG,KAAKD,WAAnB;AACA,UAAME,GAAG,GAAG,MAAMF,WAAW,GAAG,CAApB,CAAZ;AACA,UAAMG,QAAQ,GAAGJ,SAAS,CAACK,MAAV,CACf,KAAKJ,WADU,EAEf,MAAMA,WAAW,GAAG,CAApB,CAFe,CAAjB;AAKAK,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBC,GAAnB,EAAwBF,WAAxB,EAAqCG,QAArC,EAZQ,CAaR;;AACA,aACE,4BACE,MAAC,YAAD;AAAc,QAAA,IAAI,EAAEL,IAApB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGM,QAAQ,CAACI,GAAT,CAAa,UAAAC,QAAQ;AAAA,eACpB,MAAC,aAAD;AAAe,UAAA,GAAG,EAAEA,QAAQ,CAACjB,EAA7B;AAAiC,UAAA,QAAQ,EAAEM;AAA3C,WAAqDW,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADoB;AAAA,OAArB,CADH,CAFF,CADF;AAUD;AACF,GA5BD;;AA8BA,SAAO,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBb,UAAU,EAA1B,CAAP;AACD,CAnCD;;AAqCA,eAAeL,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport Page from \"../../components/Page/Page\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\r\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\r\n\r\nconst QUERY = query => gql`\r\n {\r\n   currentPage @client\r\n  location(id: ${query}) {\r\n    name\r\n    type\r\n    residents {\r\n      image\r\n      name\r\n      type\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst LocationPage = () => {\r\n  const { query } = useRouter();\r\n  const { loading, data, error } = useQuery(QUERY(query.id));\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      const {\r\n        location: { name, type, residents },\r\n        currentPage\r\n      } = data;\r\n      const start = 20 * currentPage;\r\n      const end = 20 * (currentPage + 1);\r\n      const pageData = residents.splice(\r\n        20 * currentPage,\r\n        20 * (currentPage + 1)\r\n      );\r\n\r\n      console.log(start, end, currentPage, pageData);\r\n      // console.log(data)\r\n      return (\r\n        <>\r\n          <LocationInfo type={type} name={name} />\r\n          <Layout title=\"Residents\">\r\n            {pageData.map(resident => (\r\n              <ResidentsItem key={resident.id} location={name} {...resident} />\r\n            ))}\r\n          </Layout>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <Page href=\"/\">{renderPage()}</Page>;\r\n};\r\n\r\nexport default LocationPage;\r\n"]},"metadata":{},"sourceType":"module"}