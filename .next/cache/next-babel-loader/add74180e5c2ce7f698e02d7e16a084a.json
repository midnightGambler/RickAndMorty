{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\location\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n  location(id: \", \") @client {\\n    name\\n    type\\n    residents {\\n      image\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Page from \"../../components/Page/Page\";\nimport withApollo from \"../../hooks/withApollo\";\nimport Layout from \"../../components/Layout/Layout\";\nimport Loader from \"../../components/Loader/Loader\";\n\nvar QUERY = function QUERY(query) {\n  return gql(_templateObject(), query);\n};\n\nvar LocationPage = function LocationPage() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useQuery = useQuery(QUERY(query.id)),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var renderPage = function renderPage() {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      console.log(data);\n      var _data$location = data.location,\n          name = _data$location.name,\n          type = _data$location.type,\n          residents = _data$location.residents;\n      return __jsx(React.Fragment, null, __jsx(\"img\", {\n        src: \"/locations/\".concat(type, \"/\").concat(type, \"-lg.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, name), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, type), __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Residents\"), residents.map(function (_ref) {\n        var image = _ref.image;\n        return __jsx(\"img\", {\n          src: image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n      })));\n    }\n  };\n\n  return __jsx(Page, {\n    breadcrumb: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, renderPage()));\n};\n\nexport default LocationPage;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/location/[id].js"],"names":["useRouter","useQuery","gql","Page","withApollo","Layout","Loader","QUERY","query","LocationPage","id","loading","data","error","renderPage","console","log","location","name","type","residents","map","image"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SAAIN,GAAJ,oBAEFM,KAFE;AAAA,CAAnB;;AAYA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,mBACPT,SAAS,EADF;AAAA,MACjBQ,KADiB,cACjBA,KADiB;;AAAA,kBAEQP,QAAQ,CAACM,KAAK,CAACC,KAAK,CAACE,EAAP,CAAN,CAFhB;AAAA,MAEjBC,OAFiB,aAEjBA,OAFiB;AAAA,MAERC,IAFQ,aAERA,IAFQ;AAAA,MAEFC,KAFE,aAEFA,KAFE;;AAIzB,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIH,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AACRG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AADQ,2BAIJA,IAJI,CAGNK,QAHM;AAAA,UAGMC,IAHN,kBAGMA,IAHN;AAAA,UAGYC,IAHZ,kBAGYA,IAHZ;AAAA,UAGkBC,SAHlB,kBAGkBA,SAHlB;AAKR,aACE,4BACE;AAAK,QAAA,GAAG,uBAAgBD,IAAhB,cAAwBA,IAAxB,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,IAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,IAAJ,CAHF,EAIE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGC,SAAS,CAACC,GAAV,CAAc;AAAA,YAAGC,KAAH,QAAGA,KAAH;AAAA,eACb;AAAK,UAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADa;AAAA,OAAd,CAFH,CAJF,CADF;AAaD;AACF,GAtBD;;AAwBA,SACE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASR,UAAU,EAAnB,CADF,CADF;AAKD,CAjCD;;AAmCA,eAAeL,YAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport Page from \"../../components/Page/Page\";\r\nimport withApollo from \"../../hooks/withApollo\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\n\r\nconst QUERY = query => gql`\r\n{\r\n  location(id: ${query}) @client {\r\n    name\r\n    type\r\n    residents {\r\n      image\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst LocationPage = () => {\r\n  const { query } = useRouter();\r\n  const { loading, data, error } = useQuery(QUERY(query.id));\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      console.log(data);\r\n      const {\r\n        location: { name, type, residents }\r\n      } = data;\r\n      return (\r\n        <>\r\n          <img src={`/locations/${type}/${type}-lg.png`} />\r\n          <h1>{name}</h1>\r\n          <p>{type}</p>\r\n          <Layout>\r\n            <h3>Residents</h3>\r\n            {residents.map(({ image }) => (\r\n              <img src={image} />\r\n            ))}\r\n          </Layout>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page breadcrumb=\"/\">\r\n      <Layout>{renderPage()}</Layout>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default LocationPage;\r\n"]},"metadata":{},"sourceType":"module"}