{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport withApollo from \"../hooks/withApollo\";\nimport LocationItem from \"../components/LocationItem/LocationItem\";\nimport Page from \"../components/Page/Page\";\n\nconst QUERY = () => gql`\n  {\n    locations {\n      results {\n        type\n        id\n        name\n        residents {\n          image\n        }\n      }\n    }\n  }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(QUERY());\n\n  const renderPage = () => {\n    if (loading) {\n      return __jsx(\"img\", {\n        src: \"https://cdn.dribbble.com/users/1897588/screenshots/3887258/gif_export.gif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      console.log(data);\n      const {\n        locations: {\n          results\n        }\n      } = data;\n      return results.map(props => __jsx(LocationItem, _extends({\n        key: props.id\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })));\n    }\n  };\n\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/index.js"],"names":["gql","useQuery","withApollo","LocationItem","Page","QUERY","Index","loading","data","error","renderPage","console","log","locations","results","map","props","id"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;AAEA,MAAMC,KAAK,GAAG,MAAML,GAAI;;;;;;;;;;;;;CAAxB;;AAeA,MAAMM,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BR,QAAQ,CAACI,KAAK,EAAN,CAAzC;;AAEA,QAAMK,UAAU,GAAG,MAAM;AACvB,QAAIH,OAAJ,EAAa;AACX,aACE;AAAK,QAAA,GAAG,EAAC,2EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AACRG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,YAAM;AACJK,QAAAA,SAAS,EAAE;AAAEC,UAAAA;AAAF;AADP,UAEFN,IAFJ;AAGA,aAAOM,OAAO,CAACC,GAAR,CAAYC,KAAK,IAAI,MAAC,YAAD;AAAc,QAAA,GAAG,EAAEA,KAAK,CAACC;AAAzB,SAAiCD,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB,CAAP;AACD;AACF,GAdD;;AAgBA,SAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAON,UAAU,EAAjB,CAAP;AACD,CApBD;;AAsBA,eAAeR,UAAU,CAACI,KAAD,CAAzB","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport withApollo from \"../hooks/withApollo\";\r\n\r\nimport LocationItem from \"../components/LocationItem/LocationItem\";\r\nimport Page from \"../components/Page/Page\";\r\n\r\nconst QUERY = () => gql`\r\n  {\r\n    locations {\r\n      results {\r\n        type\r\n        id\r\n        name\r\n        residents {\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Index = () => {\r\n  const { loading, data, error } = useQuery(QUERY());\r\n\r\n  const renderPage = () => {\r\n    if (loading) {\r\n      return (\r\n        <img src=\"https://cdn.dribbble.com/users/1897588/screenshots/3887258/gif_export.gif\" />\r\n      );\r\n    }\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      console.log(data);\r\n      const {\r\n        locations: { results }\r\n      } = data;\r\n      return results.map(props => <LocationItem key={props.id} {...props} />);\r\n    }\r\n  };\r\n\r\n  return <Page>{renderPage()}</Page>;\r\n};\r\n\r\nexport default withApollo(Index);\r\n"]},"metadata":{},"sourceType":"module"}