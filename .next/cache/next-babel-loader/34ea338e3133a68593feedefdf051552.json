{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\location\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Page from \"../../components/Page/Page\";\nimport withApollo from \"../../hooks/withApollo\";\nimport Layout from \"../../components/Layout/Layout\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst QUERY = query => gql`\n{\n  location(id: ${query}) {\n    name\n    type\n    residents {\n      image\n    }\n  }\n}\n`;\n\nconst LocationPage = () => {\n  const {\n    query\n  } = useRouter();\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(QUERY(query.id));\n\n  const renderPage = () => {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      console.log(data);\n      const {\n        location: {\n          name,\n          type,\n          residents\n        }\n      } = data;\n      return __jsx(React.Fragment, null, __jsx(\"img\", {\n        src: `/locations/${type}/${type}-lg.png`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, name), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, type), __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, __jsx(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Residents\"), residents.map(({\n        image\n      }) => __jsx(\"img\", {\n        src: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }))));\n    }\n  };\n\n  return __jsx(Page, {\n    breadcrumb: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default LocationPage;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/location/[id].js"],"names":["useRouter","useQuery","gql","Page","withApollo","Layout","Loader","QUERY","query","LocationPage","loading","data","error","id","renderPage","console","log","location","name","type","residents","map","image"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAIN,GAAI;;iBAEVM,KAAM;;;;;;;;CAFvB;;AAYA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM;AAAED,IAAAA;AAAF,MAAYR,SAAS,EAA3B;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BX,QAAQ,CAACM,KAAK,CAACC,KAAK,CAACK,EAAP,CAAN,CAAzC;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIJ,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AACRI,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,YAAM;AACJM,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,IAAR;AAAcC,UAAAA;AAAd;AADN,UAEFT,IAFJ;AAGA,aACE,4BACE;AAAK,QAAA,GAAG,EAAG,cAAaQ,IAAK,IAAGA,IAAK,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,IAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,IAAJ,CAHF,EAIE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGC,SAAS,CAACC,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KACb;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CAFH,CAJF,CADF;AAaD;AACF,GAtBD;;AAwBA,SAAO,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBR,UAAU,EAAhC,CAAP;AACD,CA7BD;;AA+BA,eAAeL,YAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport Page from \"../../components/Page/Page\";\r\nimport withApollo from \"../../hooks/withApollo\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\n\r\nconst QUERY = query => gql`\r\n{\r\n  location(id: ${query}) {\r\n    name\r\n    type\r\n    residents {\r\n      image\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst LocationPage = () => {\r\n  const { query } = useRouter();\r\n  const { loading, data, error } = useQuery(QUERY(query.id));\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      console.log(data);\r\n      const {\r\n        location: { name, type, residents }\r\n      } = data;\r\n      return (\r\n        <>\r\n          <img src={`/locations/${type}/${type}-lg.png`} />\r\n          <h1>{name}</h1>\r\n          <p>{type}</p>\r\n          <Layout>\r\n            <h3>Residents</h3>\r\n            {residents.map(({ image }) => (\r\n              <img src={image} />\r\n            ))}\r\n          </Layout>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <Page breadcrumb=\"/\">{renderPage()}</Page>;\r\n};\r\n\r\nexport default LocationPage;\r\n"]},"metadata":{},"sourceType":"module"}