{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport withApollo from \"../hooks/withApollo\";\nimport LocationItem from \"../components/LocationItem/LocationItem\";\nimport Page from \"../components/Page/Page\";\n\nconst QUERY = () => gql`\n  {\n    locations {\n      results {\n        type\n        id\n        name\n        residents {\n          image\n        }\n      }\n    }\n  }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data\n  } = useQuery(QUERY());\n\n  if (loading || !data) {\n    return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"loading...\");\n  } else {\n    const {\n      locations: {\n        results\n      }\n    } = data;\n    console.log(data);\n    return __jsx(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, results.map(props => __jsx(LocationItem, _extends({\n      key: props.id\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }))));\n  }\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/index.js"],"names":["gql","useQuery","withApollo","LocationItem","Page","QUERY","Index","loading","data","locations","results","console","log","map","props","id"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;AAEA,MAAMC,KAAK,GAAG,MAAML,GAAI;;;;;;;;;;;;;CAAxB;;AAeA,MAAMM,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBP,QAAQ,CAACI,KAAK,EAAN,CAAlC;;AAEA,MAAIE,OAAO,IAAI,CAACC,IAAhB,EAAsB;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFD,MAEO;AACL,UAAM;AACJC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,IAFJ;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,OAAO,CAACG,GAAR,CAAYC,KAAK,IAChB,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,KAAK,CAACC;AAAzB,OAAiCD,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CADH,CADF;AAOD;AACF,CAlBD;;AAoBA,eAAeZ,UAAU,CAACI,KAAD,CAAzB","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport withApollo from \"../hooks/withApollo\";\r\n\r\nimport LocationItem from \"../components/LocationItem/LocationItem\";\r\nimport Page from \"../components/Page/Page\";\r\n\r\nconst QUERY = () => gql`\r\n  {\r\n    locations {\r\n      results {\r\n        type\r\n        id\r\n        name\r\n        residents {\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Index = () => {\r\n  const { loading, data } = useQuery(QUERY());\r\n\r\n  if (loading || !data) {\r\n    return <h1>loading...</h1>;\r\n  } else {\r\n    const {\r\n      locations: { results }\r\n    } = data;\r\n    console.log(data);\r\n    return (\r\n      <Page>\r\n        {results.map(props => (\r\n          <LocationItem key={props.id} {...props} />\r\n        ))}\r\n      </Page>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withApollo(Index);\r\n"]},"metadata":{},"sourceType":"module"}