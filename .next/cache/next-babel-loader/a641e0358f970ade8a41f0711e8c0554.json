{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport LocationItem from \"../components/LocationItem/LocationItem\";\nimport Page from \"../components/Page/Page\";\nimport Layout from \"../components/Layout/Layout\";\nimport Loader from \"../components/Loader/Loader\";\n\nconst QUERY = () => gql`\n  query locations($page: Int) {\n    locations(page: $page) {\n      info {\n        next\n      }\n      results {\n        type\n        id\n        name\n        residents {\n          image\n        }\n      }\n    }\n  }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data,\n    error,\n    fetchMore\n  } = useQuery(QUERY());\n\n  const updateList = () => fetchMore({\n    variables: {\n      page: data.locations.info.next\n    },\n    updateQuery: (prev, {\n      fetchMoreResult\n    }) => {\n      if (!fetchMoreResult) return prev;\n      console.log(fetchMoreResult);\n      console.log(prev);\n      return _objectSpread({}, fetchMoreResult, {\n        results: [...prev.locations.results, ...fetchMoreResult.locations.results]\n      });\n    }\n  });\n\n  const renderPage = () => {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      console.log(data);\n      const {\n        locations: {\n          results\n        }\n      } = data;\n      return __jsx(React.Fragment, null, __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, results.map(props => __jsx(LocationItem, _extends({\n        key: props.id\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })))), __jsx(\"button\", {\n        onClick: () => updateList(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Fetch more\"));\n    }\n  };\n\n  return __jsx(Page, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/index.js"],"names":["gql","useQuery","LocationItem","Page","Layout","Loader","QUERY","Index","loading","data","error","fetchMore","updateList","variables","page","locations","info","next","updateQuery","prev","fetchMoreResult","console","log","results","renderPage","map","props","id"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA,MAAMC,KAAK,GAAG,MAAMN,GAAI;;;;;;;;;;;;;;;;CAAxB;;AAkBA,MAAMO,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAsCV,QAAQ,CAACK,KAAK,EAAN,CAApD;;AAEA,QAAMM,UAAU,GAAG,MACjBD,SAAS,CAAC;AACRE,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEL,IAAI,CAACM,SAAL,CAAeC,IAAf,CAAoBC;AADjB,KADH;AAIRC,IAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA;AAAF,KAAP,KAA+B;AAC1C,UAAI,CAACA,eAAL,EAAsB,OAAOD,IAAP;AACtBE,MAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,+BACKC,eADL;AAEEG,QAAAA,OAAO,EAAE,CACP,GAAGJ,IAAI,CAACJ,SAAL,CAAeQ,OADX,EAEP,GAAGH,eAAe,CAACL,SAAhB,CAA0BQ,OAFtB;AAFX;AAOD;AAfO,GAAD,CADX;;AAmBA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIhB,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;;AACX,QAAID,IAAJ,EAAU;AACRY,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,YAAM;AACJM,QAAAA,SAAS,EAAE;AAAEQ,UAAAA;AAAF;AADP,UAEFd,IAFJ;AAGA,aACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGc,OAAO,CAACE,GAAR,CAAYC,KAAK,IAChB,MAAC,YAAD;AAAc,QAAA,GAAG,EAAEA,KAAK,CAACC;AAAzB,SAAiCD,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD,CADH,CADF,EAME;AAAQ,QAAA,OAAO,EAAE,MAAMd,UAAU,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANF,CADF;AAUD;AACF,GAnBD;;AAqBA,SAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOY,UAAU,EAAjB,CAAP;AACD,CA5CD;;AA8CA,eAAejB,KAAf","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\nimport LocationItem from \"../components/LocationItem/LocationItem\";\r\nimport Page from \"../components/Page/Page\";\r\nimport Layout from \"../components/Layout/Layout\";\r\nimport Loader from \"../components/Loader/Loader\";\r\n\r\nconst QUERY = () => gql`\r\n  query locations($page: Int) {\r\n    locations(page: $page) {\r\n      info {\r\n        next\r\n      }\r\n      results {\r\n        type\r\n        id\r\n        name\r\n        residents {\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Index = () => {\r\n  const { loading, data, error, fetchMore } = useQuery(QUERY());\r\n\r\n  const updateList = () =>\r\n    fetchMore({\r\n      variables: {\r\n        page: data.locations.info.next\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        if (!fetchMoreResult) return prev;\r\n        console.log(fetchMoreResult);\r\n        console.log(prev);\r\n        return {\r\n          ...fetchMoreResult,\r\n          results: [\r\n            ...prev.locations.results,\r\n            ...fetchMoreResult.locations.results\r\n          ]\r\n        };\r\n      }\r\n    });\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      console.log(data);\r\n      const {\r\n        locations: { results }\r\n      } = data;\r\n      return (\r\n        <>\r\n          <Layout>\r\n            {results.map(props => (\r\n              <LocationItem key={props.id} {...props} />\r\n            ))}\r\n          </Layout>\r\n          <button onClick={() => updateList()}>Fetch more</button>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <Page>{renderPage()}</Page>;\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}