{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport withApollo from \"../hooks/withApollo\";\nimport LocationItem from \"../components/LocationItem/LocationItem\";\nimport Page from \"../components/Page/Page\";\nconst QUERY = gql`\n  {\n    locations {\n      results {\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data\n  } = useQuery(QUERY);\n\n  if (loading || !data) {\n    return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"loading...\");\n  } else {\n    const {\n      locations: {\n        results\n      }\n    } = data;\n    console.log(data);\n    return __jsx(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, results.map(({\n      type,\n      id\n    }) => __jsx(LocationItem, {\n      key: id,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/index.js"],"names":["gql","useQuery","withApollo","LocationItem","Page","QUERY","Index","loading","data","locations","results","console","log","map","type","id"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AAEA,MAAMC,KAAK,GAAGL,GAAI;;;;;;;;;CAAlB;;AAWA,MAAMM,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBP,QAAQ,CAACI,KAAD,CAAlC;;AAEA,MAAIE,OAAO,IAAI,CAACC,IAAhB,EAAsB;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFD,MAEO;AACL,UAAM;AACJC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,IAFJ;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,OAAO,CAACG,GAAR,CAAY,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KACX,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,EAAnB;AAAuB,MAAA,IAAI,EAAED,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAOD;AACF,CAlBD;;AAoBA,eAAeZ,UAAU,CAACI,KAAD,CAAzB","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport withApollo from \"../hooks/withApollo\";\r\n\r\nimport LocationItem from \"../components/LocationItem/LocationItem\";\r\nimport Page from \"../components/Page/Page\";\r\n\r\nconst QUERY = gql`\r\n  {\r\n    locations {\r\n      results {\r\n        type\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Index = () => {\r\n  const { loading, data } = useQuery(QUERY);\r\n\r\n  if (loading || !data) {\r\n    return <h1>loading...</h1>;\r\n  } else {\r\n    const {\r\n      locations: { results }\r\n    } = data;\r\n    console.log(data);\r\n    return (\r\n      <Page>\r\n        {results.map(({ type, id }) => (\r\n          <LocationItem key={id} type={type} />\r\n        ))}\r\n      </Page>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withApollo(Index);\r\n"]},"metadata":{},"sourceType":"module"}