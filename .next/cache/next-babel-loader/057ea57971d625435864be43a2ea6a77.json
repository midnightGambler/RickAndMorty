{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ashur\\\\Desktop\\\\React\\\\RickAndMorty\\\\pages\\\\location\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport Page from \"../../components/Page/Page\";\nimport Layout from \"../../components/Layout/Layout\";\nimport Loader from \"../../components/Loader/Loader\";\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\nimport { ResidentsPageQuery } from \"../../store/queries\";\n\nvar LocationPage = function LocationPage() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useQuery = useQuery(ResidentsPageQuery(query.id)),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var client = useApolloClient();\n  useEffect(function () {\n    // resets pages counter for client side pagination on unmount\n    return function () {\n      return client.writeData({\n        data: {\n          currentResidentsPage: 0\n        }\n      });\n    };\n  }, []);\n\n  var renderPage = function renderPage() {\n    if (loading) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"error\");\n\n    if (data) {\n      var _data$location = data.location,\n          name = _data$location.name,\n          type = _data$location.type,\n          residents = _data$location.residents,\n          currentResidentsPage = data.currentResidentsPage; // getting paginated data\n\n      var pageData = _toConsumableArray(residents).splice(0, 20 * (currentResidentsPage + 1)); // boolean for checking if there is more items for render in the list\n\n\n      var hasMore = residents.length - currentResidentsPage * 20 > 0;\n      return __jsx(React.Fragment, null, __jsx(LocationInfo, {\n        type: type,\n        name: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), __jsx(InfiniteScroll, {\n        initialLoad: false,\n        loader: __jsx(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }),\n        pageStart: 0,\n        loadMore: function loadMore() {\n          client.writeData({\n            data: {\n              currentResidentsPage: currentResidentsPage + 1\n            }\n          });\n        },\n        hasMore: hasMore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, __jsx(Layout, {\n        title: \"Residents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, pageData.map(function (resident) {\n        return __jsx(ResidentsItem, _extends({\n          key: resident.id,\n          location: name\n        }, resident, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n      }))));\n    }\n  };\n\n  return __jsx(Page, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, renderPage());\n};\n\nexport default LocationPage;","map":{"version":3,"sources":["C:/Users/ashur/Desktop/React/RickAndMorty/pages/location/[id].js"],"names":["useEffect","useRouter","useQuery","useApolloClient","InfiniteScroll","Page","Layout","Loader","LocationInfo","ResidentsItem","ResidentsPageQuery","LocationPage","query","id","loading","data","error","client","writeData","currentResidentsPage","renderPage","location","name","type","residents","pageData","splice","hasMore","length","map","resident"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nimport Page from \"../../components/Page/Page\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport LocationInfo from \"../../components/LocationInfo/LocationInfo\";\r\nimport ResidentsItem from \"../../components/ResidentsItem/ResidentsItem\";\r\nimport { ResidentsPageQuery } from \"../../store/queries\";\r\n\r\nconst LocationPage = () => {\r\n  const { query } = useRouter();\r\n  const { loading, data, error } = useQuery(ResidentsPageQuery(query.id));\r\n  const client = useApolloClient();\r\n\r\n  useEffect(() => {\r\n    // resets pages counter for client side pagination on unmount\r\n    return () =>\r\n      client.writeData({\r\n        data: { currentResidentsPage: 0 }\r\n      });\r\n  }, []);\r\n\r\n  const renderPage = () => {\r\n    if (loading) return <Loader />;\r\n    if (error) return <h1>error</h1>;\r\n    if (data) {\r\n      const {\r\n        location: { name, type, residents },\r\n        currentResidentsPage\r\n      } = data;\r\n\r\n      // getting paginated data\r\n      const pageData = [...residents].splice(\r\n        0,\r\n        20 * (currentResidentsPage + 1)\r\n      );\r\n      // boolean for checking if there is more items for render in the list\r\n      const hasMore = residents.length - currentResidentsPage * 20 > 0;\r\n      return (\r\n        <>\r\n          <LocationInfo type={type} name={name} />\r\n          <InfiniteScroll\r\n            initialLoad={false}\r\n            loader={<Loader />}\r\n            pageStart={0}\r\n            loadMore={() => {\r\n              client.writeData({\r\n                data: { currentResidentsPage: currentResidentsPage + 1 }\r\n              });\r\n            }}\r\n            hasMore={hasMore}\r\n          >\r\n            <Layout title=\"Residents\">\r\n              {pageData.map(resident => (\r\n                <ResidentsItem\r\n                  key={resident.id}\r\n                  location={name}\r\n                  {...resident}\r\n                />\r\n              ))}\r\n            </Layout>\r\n          </InfiniteScroll>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <Page href=\"/\">{renderPage()}</Page>;\r\n};\r\n\r\nexport default LocationPage;\r\n"]},"metadata":{},"sourceType":"module"}